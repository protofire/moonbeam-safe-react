diff --git a/node_modules/web3-provider-engine/dist/ProviderEngine.js b/node_modules/web3-provider-engine/dist/ProviderEngine.js
index 4c7028b..0116d5b 100644
--- a/node_modules/web3-provider-engine/dist/ProviderEngine.js
+++ b/node_modules/web3-provider-engine/dist/ProviderEngine.js
@@ -38,7 +38,7 @@ function Web3ProviderEngine(opts) {
   self._blockTracker = opts.blockTracker || new EthBlockTracker({
     provider: blockTrackerProvider,
     pollingInterval: opts.pollingInterval || 4000,
-    setSkipCacheFlag: true
+    setSkipCacheFlag: false
   }); // set initialization blocker
 
   self._ready = new Stoplight(); // local state
@@ -191,7 +191,7 @@ Web3ProviderEngine.prototype._getBlockByNumber = function (blockNumber, cb) {
   var req = createPayload({
     method: 'eth_getBlockByNumber',
     params: [blockNumber, false],
-    skipCache: true
+    //skipCache: true
   });
 
   this._handleAsync(req, function (err, res) {
@@ -12504,7 +12504,7 @@ class PollingBlockTracker extends BaseBlockTracker {
     const pollingInterval = opts.pollingInterval || 20 * sec
     const retryTimeout = opts.retryTimeout || pollingInterval / 10
     const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true
-    const setSkipCacheFlag = opts.setSkipCacheFlag || false
+    const setSkipCacheFlag = false
     // BaseBlockTracker constructor
     super(Object.assign({
       blockResetDuration: pollingInterval,
@@ -12560,7 +12560,7 @@ class PollingBlockTracker extends BaseBlockTracker {
 
   async _fetchLatestBlock () {
     const req = { jsonrpc: "2.0", id: 1, method: 'eth_blockNumber', params: [] }
-    if (this._setSkipCacheFlag) req.skipCache = true
+    //if (this._setSkipCacheFlag) req.skipCache = true
     const res = await pify((cb) => this._provider.sendAsync(req, cb))()
     if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`)
     return res.result
diff --git a/node_modules/web3-provider-engine/dist/ZeroClientProvider.js b/node_modules/web3-provider-engine/dist/ZeroClientProvider.js
index 15b20ef..59a918f 100644
--- a/node_modules/web3-provider-engine/dist/ZeroClientProvider.js
+++ b/node_modules/web3-provider-engine/dist/ZeroClientProvider.js
@@ -38,7 +38,7 @@ function Web3ProviderEngine(opts) {
   self._blockTracker = opts.blockTracker || new EthBlockTracker({
     provider: blockTrackerProvider,
     pollingInterval: opts.pollingInterval || 4000,
-    setSkipCacheFlag: true
+    setSkipCacheFlag: false
   }); // set initialization blocker
 
   self._ready = new Stoplight(); // local state
@@ -191,7 +191,7 @@ Web3ProviderEngine.prototype._getBlockByNumber = function (blockNumber, cb) {
   var req = createPayload({
     method: 'eth_getBlockByNumber',
     params: [blockNumber, false],
-    skipCache: true
+    //skipCache: true
   });
 
   this._handleAsync(req, function (err, res) {
@@ -14081,7 +14081,7 @@ class PollingBlockTracker extends BaseBlockTracker {
     const pollingInterval = opts.pollingInterval || 20 * sec
     const retryTimeout = opts.retryTimeout || pollingInterval / 10
     const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true
-    const setSkipCacheFlag = opts.setSkipCacheFlag || false
+    const setSkipCacheFlag = false
     // BaseBlockTracker constructor
     super(Object.assign({
       blockResetDuration: pollingInterval,
@@ -14137,7 +14137,7 @@ class PollingBlockTracker extends BaseBlockTracker {
 
   async _fetchLatestBlock () {
     const req = { jsonrpc: "2.0", id: 1, method: 'eth_blockNumber', params: [] }
-    if (this._setSkipCacheFlag) req.skipCache = true
+   // if (this._setSkipCacheFlag) req.skipCache = true
     const res = await pify((cb) => this._provider.sendAsync(req, cb))()
     if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\n${res.error}`)
     return res.result
diff --git a/node_modules/web3-provider-engine/dist/es5/index.js b/node_modules/web3-provider-engine/dist/es5/index.js
index 066a01d..c08a10d 100644
--- a/node_modules/web3-provider-engine/dist/es5/index.js
+++ b/node_modules/web3-provider-engine/dist/es5/index.js
@@ -37,7 +37,7 @@ function Web3ProviderEngine(opts) {
   self._blockTracker = opts.blockTracker || new EthBlockTracker({
     provider: blockTrackerProvider,
     pollingInterval: opts.pollingInterval || 4000,
-    setSkipCacheFlag: true
+    setSkipCacheFlag: false
   }); // set initialization blocker
 
   self._ready = new Stoplight(); // local state
@@ -190,7 +190,7 @@ Web3ProviderEngine.prototype._getBlockByNumber = function (blockNumber, cb) {
   var req = createPayload({
     method: 'eth_getBlockByNumber',
     params: [blockNumber, false],
-    skipCache: true
+    //skipCache: true
   });
 
   this._handleAsync(req, function (err, res) {
diff --git a/node_modules/web3-provider-engine/index.js b/node_modules/web3-provider-engine/index.js
index 3a1b7d5..1e5aae3 100644
--- a/node_modules/web3-provider-engine/index.js
+++ b/node_modules/web3-provider-engine/index.js
@@ -27,7 +27,7 @@ function Web3ProviderEngine(opts) {
   self._blockTracker = opts.blockTracker || new EthBlockTracker({
     provider: blockTrackerProvider,
     pollingInterval: opts.pollingInterval || 4000,
-    setSkipCacheFlag: true,
+    setSkipCacheFlag: false,
   })
 
   // set initialization blocker
@@ -169,7 +169,7 @@ Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function(blockNumber,
 
 
 Web3ProviderEngine.prototype._getBlockByNumber = function(blockNumber, cb) {
-  const req = createPayload({ method: 'eth_getBlockByNumber', params: [blockNumber, false], skipCache: true })
+  const req = createPayload({ method: 'eth_getBlockByNumber', params: [blockNumber, false] })
   this._handleAsync(req, (err, res) => {
     if (err) return cb(err)
     return cb(null, res.result)
