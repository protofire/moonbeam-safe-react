diff --git a/node_modules/web3-provider-engine/dist/ProviderEngine.js b/node_modules/web3-provider-engine/dist/ProviderEngine.js
index 4c7028b..acdc5a4 100644
--- a/node_modules/web3-provider-engine/dist/ProviderEngine.js
+++ b/node_modules/web3-provider-engine/dist/ProviderEngine.js
@@ -38,7 +38,7 @@ function Web3ProviderEngine(opts) {
   self._blockTracker = opts.blockTracker || new EthBlockTracker({
     provider: blockTrackerProvider,
     pollingInterval: opts.pollingInterval || 4000,
-    setSkipCacheFlag: true
+    setSkipCacheFlag: false
   }); // set initialization blocker
 
   self._ready = new Stoplight(); // local state
@@ -190,8 +190,7 @@ Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function (blockNumber,
 Web3ProviderEngine.prototype._getBlockByNumber = function (blockNumber, cb) {
   var req = createPayload({
     method: 'eth_getBlockByNumber',
-    params: [blockNumber, false],
-    skipCache: true
+    params: [blockNumber, false]
   });
 
   this._handleAsync(req, function (err, res) {
diff --git a/node_modules/web3-provider-engine/index.js b/node_modules/web3-provider-engine/index.js
index 3a1b7d5..1e5aae3 100644
--- a/node_modules/web3-provider-engine/index.js
+++ b/node_modules/web3-provider-engine/index.js
@@ -27,7 +27,7 @@ function Web3ProviderEngine(opts) {
   self._blockTracker = opts.blockTracker || new EthBlockTracker({
     provider: blockTrackerProvider,
     pollingInterval: opts.pollingInterval || 4000,
-    setSkipCacheFlag: true,
+    setSkipCacheFlag: false,
   })
 
   // set initialization blocker
@@ -169,7 +169,7 @@ Web3ProviderEngine.prototype._getBlockByNumberWithRetry = function(blockNumber,
 
 
 Web3ProviderEngine.prototype._getBlockByNumber = function(blockNumber, cb) {
-  const req = createPayload({ method: 'eth_getBlockByNumber', params: [blockNumber, false], skipCache: true })
+  const req = createPayload({ method: 'eth_getBlockByNumber', params: [blockNumber, false] })
   this._handleAsync(req, (err, res) => {
     if (err) return cb(err)
     return cb(null, res.result)
